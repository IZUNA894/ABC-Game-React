{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["bell","UIFx","App","props","setLetter","index","state","console","log","letter","word","wordSoundLink","imgLink","letterSoundLink","data","image","wordSound","letterSound","setState","onSoundChange","e","soundChecked","setVolume","onRandomChange","randomChecked","handleNext","Math","floor","random","handlePrevious","playWordSound","file","play","playLetterSound","this","prevBtnClass","classNames","disabled","Img","style","height","src","onClick","className","textAlign","onChange","checked","handleDiameter","offColor","onColor","offHandleColor","onHandleColor","width","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1d3652b5.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport Switch from \"react-switch\";\nimport data from './original.json'\nimport UIFx from 'uifx';\nimport classNames from 'classnames';\n\nconst bell = new UIFx(\"#\");\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state={\n      soundChecked:true,\n      randomChecked:false,\n      letter:'A',\n      word:'',\n      wordSoundLink:'',\n      letterSoundLink:'',\n      imgLink:'',\n      index:0\n    }\n  }\n  setLetter =()=>{\n    var index = this.state.index;\n    console.log(index);\n    var letter =undefined;\n    var word = undefined;\n    var wordSoundLink = undefined;\n    var imgLink = undefined;\n    var letterSoundLink = undefined;\n\n    letter = data[index].letter;\n    imgLink = data[index].image;\n    wordSoundLink = data[index].wordSound;\n    letterSoundLink = data[index].letterSound;\n    word = data[index].word;\n\n    this.setState({index,letter,word,wordSoundLink,letterSoundLink,imgLink});\n\n  }\n  onSoundChange = (e)=>{\n    this.setState({soundChecked:e})\n    if(e){\n      console.log('hh')\n      //true\n      bell.setVolume(1.0);\n    }\n    else{\n      //false\n      console.log('called')\n      bell.setVolume(0.0);\n    }\n    console.log(e);\n  }\n  onRandomChange = (e)=>{\n    this.setState({randomChecked:e})\n    console.log(e);\n  }\n  handleNext = ()=>{\n    var index = this.state.index;\n    if(this.state.randomChecked){\n      //if user select for random\n      index = Math.floor(Math.random() * 100 ) %26\n    }else{\n      //if user need sequential\n      if(index == 25)\n      index = -1;\n\n      index++;\n    }\n    \n    console.log(index)\n    this.setState({index},()=>this.setLetter());\n  }\n  handlePrevious = ()=>{\n    var index = this.state.index;\n    if(index == 0)\n      index = 26;\n    \n    index--;\n    this.setState({index},()=>this.setLetter());\n\n\n  }\n\n  playWordSound =()=>{\n    bell.file = this.state.wordSoundLink;\n    bell.play();\n    console.log(bell);\n  }\n  playLetterSound =()=>{\n    bell.file = this.state.letterSoundLink;\n    bell.play();\n    console.log(bell);\n  }\n  componentWillMount(){\n    this.setLetter();\n  }\n\n  render(){\n    console.log(this.state)\n    var prevBtnClass = classNames('waves-effect', 'waves-light', 'btn',  'green', 'darken-3',{disabled:this.state.randomChecked})\n\n\n    var Img = this.state.imgLink ? <img style={{height:'30vh'}}src={this.state.imgLink} onClick={this.playWordSound}/>:'click next for img'\n\n  \n    return (\n      <div className=\"App\">\n        \n        {/* heading */}\n        <div className=\"row\">\n            <div className=\"col s12 black white-text valign-wrapper center-align\">\n              <h1 className=\"center-align\">Easy ABC</h1>\n            </div>\n          </div>\n        <div className=\"row pink\">\n          {/* two toggles */}\n          <div className=\"row \">\n            <div className=\"col s12\" style={{textAlign: 'center'}}>\n              <div className=\"wrapper\">\n                <label>\n                  <span className=\"text1 white-text\">Random Letters</span>\n                  <Switch\n                    onChange={this.onRandomChange}\n                    checked={this.state.randomChecked}\n                    handleDiameter={28}\n                    offColor=\"#08f\"\n                    onColor=\"#0ff\"\n                    offHandleColor=\"#0ff\"\n                    onHandleColor=\"#08f\"\n                    height={40}\n                    width={70}\n                    className=\"react-switch\"\n                  />\n                </label>\n                <label>\n                  <span className=\"text2 white-text\">Sound</span>\n                  <Switch\n                    onChange={this.onSoundChange}\n                    checked={this.state.soundChecked}\n                    handleDiameter={28}\n                    offColor=\"#08f\"\n                    onColor=\"#0ff\"\n                    offHandleColor=\"#0ff\"\n                    onHandleColor=\"#08f\"\n                    height={40}\n                    width={70}\n                    className=\"react-switch\"\n                  />\n                </label>\n              </div>\n\n  \n            </div>\n          </div>\n          {/* Letter row */}\n          <div className=\"row letterParentClass pink lighten-3\">\n            <div className=\"col s12 white-text  valign-wrapper \" onClick={this.playLetterSound}>\n                <span className=\"letter-cell-text\">{this.state.letter}</span>\n            </div>\n          </div>\n          {/* Three buttons */}\n          <div className=\"row\">\n            <div className=\"col s12 center-align\" >\n              <a className={prevBtnClass} style={{width:'8vw'}} onClick = {this.handlePrevious}>Previous</a>\n              <a className=\"waves-effect waves-light btn yellow darken-4\" style={{width:'20vw'}} onClick={this.playLetterSound}>Play sound Again</a>\n              <a className=\"waves-effect waves-light btn  light-blue\" style={{width:'8vw'}} onClick = {this.handleNext}>Next</a>\n            </div>\n          </div>\n          {/* word and image row */}\n          <div className=\"row wordParentClass pink lighten-3 white-text\">\n          <div className=\"col s6 center-align valign-wrapper\">\n            <span className=\"imageClass center-align\">\n            {Img}\n            </span>\n          </div>\n          <div className=\"col s6 center-align valign-wrapper\">\n            <span className=\"wordClass center-align\" onClick={this.playWordSound}>\n              {this.state.word?this.state.word :'click next for splelling'}\n            </span>\n          </div>\n        </div>\n        </div>\n\n\n\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}